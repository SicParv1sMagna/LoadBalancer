# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up go
      uses: actions/setup-go@v4

    - name: Install gocover-cobertura
      run: |
        go get github.com/boumenot/gocover-covertura && go install github.com/boumenot/gocover-covertura

    - name: Set up gotestfmt
      uses: GoTestTools/gotestfmt-action@v2
      with:
        version: v2.0.0
        org: GoTestTools
        repo: gotestfmt

    - name: Run tests
      run: sudo go test -race -json -v -coverprofile=coverage.txt ./... 2>&1 | tee /tmp/gotest.log | gotestfmt

    - name: Convert go coverage to cobertura gormat
      run: gocover-cobertura < coverage.txt > coverage.xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: ./coverage.xml
        
    - name: Generate code coverage report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
          filename: coverage.xml
          badge: false
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
